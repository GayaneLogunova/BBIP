{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","isLoad","data","quant","tasks","done_tasks","pending_tasks","failed_tasks","index","getFile","bind","formData","FormData","axios","post","this","postRequest","then","result","setState","printValues","JSON","parse","stringify","obj","index_var","k","Object","arr","length","push","text","who","time_limit","classificator","d_count","p_count","f_count","i","console","log","Grid","container","direction","justify","alignItems","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"js/main.eab744bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from \"react\";\nimport axios from 'axios'; \nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport { Grid } from '@material-ui/core';\n\nimport Card from \"react-bootstrap\";\nimport GridLayout from 'react-grid-layout';\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isLoad: false, data: \"\", quant: 0, tasks: [[\"failed\", \"tasks\", \"18:00\", \"professor\"]], done_tasks: [[\"done\", \"hi\", \"hello\"],], pending_tasks: [[\"pending\", \"hi\", \"hello\"]], failed_tasks: [[\"failed\", \"hi\", \"hello\"]], index: -1}\n    this.getFile = this.getFile.bind(this);\n  }\n\n  postRequest() {\n    const url = \"/data\";\n    const formData = new FormData();\n    return axios.post(url, formData);\n  }\n\n  getFile() { \n    this.postRequest().then(result => {\n      this.setState({data: result, isLoad: true}, \n        this.printValues(JSON.parse(JSON.stringify(this.state.data)).data))})\n  }\n\n  printValues(obj) {\n    var index_var = this.state.index;\n    for(var k in obj) {\n      if(obj[k] instanceof Object) {\n          index_var += 1;\n          this.setState({index: index_var})\n          this.printValues(obj[k]);\n      } \n      else {\n        var arr = this.state.tasks;\n        if (arr.length < (this.state.index + 1)) {\n          arr.push([]);\n        }\n        arr[index_var] = [];\n        arr[index_var].push(obj.state);\n        arr[index_var].push(obj.text);\n        arr[index_var].push(obj.who);\n        arr[index_var].push(obj.time_limit);\n        this.setState({tasks: arr})\n      };\n    }\n    this.classificator();\n  };\n\n  classificator() {\n    var d_count = 0;\n    var p_count = 0;\n    var f_count = 0;\n    for (var i = 0; i < this.state.index; i++) {\n      if (this.state.tasks[i][0] == \"done\") {\n        var arr = this.state.done_tasks;\n        if (arr.length < (d_count + 1)) {\n          arr.push([]);\n        }\n        arr[d_count] = this.state.tasks[i];\n        this.setState({done_tasks: arr});\n        d_count += 1;\n      }\n      else if (this.state.tasks[i][0] == \"pending\") {\n        var arr = this.state.pending_tasks;\n        if (arr.length < (p_count + 1)) {\n          arr.push([]);\n        }\n        arr[p_count] = this.state.tasks[i];\n        this.setState({pending_tasks: arr});\n        p_count += 1;\n      }\n      else if (this.state.tasks[i][0] == \"failed\") {\n        var arr = this.state.failed_tasks;\n        if (arr.length < (f_count + 1)) {\n          arr.push([]);\n        }\n        arr[f_count] = this.state.tasks[i];\n        this.setState({failed_tasks: arr});\n        f_count += 1;\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.getFile();\n    this.getFile();\n  }\n\n\n  render() {\n    const isLoad = this.state.isLoad;\n    let text;\n    if (isLoad) {\n      text = this.state.done_tasks[0][1];\n    } else {\n      text = \"Go to the supermarket\"\n    }\n    console.log(\"done_tasks: \" + this.state.done_tasks);\n\n    \n\n    // const layout = [\n    //   {i: 'one', x: 5, y: 5, w: 10, h: 10, static: true},\n    //   {i: 'two', x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4},\n    //   {i: 'three', x: 4, y: 0, w: 1, h: 2}\n    // ];\n    // layout.push({i: 'test', x: 100, y: 200, w: 10, h: 10})\n    // let cards = [];\n    // for (var i = 0; i < this.state.done_tasks; i++) {\n    //   cards.push(\n    //     <Card\n    //     bg=\"success\"\n    //     text=\"black\"\n    //     className=\"mb-2\"\n    //     style={{ width: '40rem' }}\n    //     >\n    //       <Card.Text style={{fontSize: \"40px\", textAlign: \"center\"}}>{this.state.done_tasks[i][1]}</Card.Text>\n    //     </Card>\n    //   );\n    // }\n    // for (var i = 0; i < this.state.pending_tasks; i++) {\n    //   cards.push(\n    //     <Card\n    //     bg=\"success\"\n    //     text=\"black\"\n    //     className=\"mb-2\"\n    //     style={{ width: '40rem' }}\n    //     >\n    //       <Card.Text style={{fontSize: \"40px\", textAlign: \"center\"}}>{this.state.pending_tasks[i][1]}</Card.Text>\n    //     </Card>\n    //   );\n    // }\n    return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"flex-start\"\n      alignItems=\"stretch\"\n    >\n      {this.state.done_tasks[0]}\n    </Grid>\n      // <GridLayout className=\"layout\" layout={layout} cols={12} rowHeight={30} width={1200}>\n      //   <div key=\"one\">a</div>\n      //   <div key=\"two\">b</div>\n      //   <div key=\"three\">c</div>\n      //   <div key=\"test\">test</div>\n      // </GridLayout>\n      // this.state.done_tasks.map((variant, idx) => (\n      //   <Card\n      //   bg=\"success\"\n      //   text=\"black\"\n      //   className=\"mb-2\"\n      //   style={{ width: '40rem' }}\n      //   >\n      //     <Card.Text style={{fontSize: \"40px\", textAlign: \"center\"}}>{variant[1]}</Card.Text>\n      //   </Card>\n      //   )\n      // )\n\n      // <div\n      // style={{\n      //   display: \"flex\",\n      //   justifyContent: \"center\",\n      //   alignContent: \"center\"\n      // }}>\n      //   <button onClick={this.getFile}>\n      //     Get Data\n      //   </button>\n\n\n\n\n\n\n      //   <Card\n      //     bg=\"success\"\n      //     text=\"black\"\n      //     className=\"mb-2\"\n      //     style={{ width: '40rem' }}\n      //     >\n      //       <Card.Text style={{fontSize: \"40px\", textAlign: \"center\"}}>{text}</Card.Text>\n      //   </Card>\n      // </div>\n\n     \n      // [\n      //   'Primary',\n      //   'Secondary',\n      //   'Success',\n      //   'Danger',\n      //   'Warning',\n      //   'Info',\n      //   'Light',\n      //   'Dark',\n      // ].map((variant, idx) => (\n      //   <Card\n      //     bg={variant.toLowerCase()}\n      //     key={idx}\n      //     text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\n      //     style={{ width: '18rem' }}\n      //     className=\"mb-2\"\n      //   >\n      //     <Card.Header>Header</Card.Header>\n      //     <Card.Body>\n      //       <Card.Title>{variant} Card Title </Card.Title>\n      //       <Card.Text>\n      //         Some quick example text to build on the card title and make up the bulk\n      //         of the card's content.\n      //       </Card.Text>\n      //     </Card.Body>\n      //   </Card>\n      // ))\n\n     \n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n // <React.StrictMode>\n  <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// asdsadadsdIf you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}